#################################################
## Defining the update function of full matrix theta with dimensions T_grid*K
theta.update<-function(theta.curr,pi,gamma,network,N,K,T_data,T_grid,bandwidth,data_ids,grid_ids){
theta.next<-matrix(NA_real_,T_grid,K)
for (t in 1:T_grid){
kernel_vec<-rep(0,T_grid)
for (temp_index in 1:T_grid){
kernel_vec[temp_index]<-(1/bandwidth)*epan((data_ids[temp_index+1]-grid_ids[t])/bandwidth)
}
nonzero_ids<-which(kernel_vec!=0)
nonzero_ids_len<-length(nonzero_ids)
grad_vec_kern<-matrix(0,nonzero_ids_len,K)
if (nonzero_ids_len!=0){
grad_vec<-grad_EM_undir_Stab(theta_u=as.vector(theta.curr[t,]), gamma=gamma, network=network, N=N, K=K, nonzero_ids=nonzero_ids,nonzero_ids_len=nonzero_ids_len)
for (temp_index in 1:nonzero_ids_len){
grad_vec_kern[temp_index,]<-grad_vec[temp_index,]*kernel_vec[nonzero_ids[temp_index]]
}
}
gradient<-colSums(grad_vec_kern)
hess<-hess_EM_undir_Stab(theta_u=as.vector(theta.curr[t,]), gamma=gamma, N=N, K=K, T_grid=T_grid, bandwidth=bandwidth, data_ids=data_ids, grid_ids=grid_ids, grid_id_index=(t-1))
if(sum(hess)==0){
theta.next[t,]<-as.vector(theta.curr[t,])
} else{theta.next[t,]<-as.vector(theta.curr[t,])-as.vector(solve(hess)%*%gradient)}
}
return(theta.next)
}
#################################################
## Defining a function that takes inputs as: 1) initial values list of parameters, 2) network, 3) Number of clusters K and 4) number of iterations and outputs the whole list of all parameter iterates
iterator<-function(start,network,K,n_iter,thres,bandwidth,grid_ids){
N<-dim(network)[1]
T_data<-dim(network)[3] ## Total time points in the network for which we have data in the form of
## adjacency matrix
T_grid<-length(grid_ids)  ## Number of grid points
## Defining the indices for actual data points
data_ids<-1:T_data
## initializing the arrays for parameters
gamma<-array(NA_real_,dim=c(N,K,T_grid,n_iter))
pi<-array(NA_real_,dim=c(T_grid,K,n_iter))
theta<-array(NA_real_,dim=c(T_grid,K,n_iter))
gamma[,,,1]<-start[[1]]
pi[,,1]<-start[[2]]
theta[,,1]<-start[[3]]
## iterations
## Defining the iteration index
iter_index<-2
## Initializing the error
error<-Inf
## Initializing the current ELBO values over the whole grid
ELBO_grid.curr<-rep(10^10,T_grid)
while((error>thres)&(iter_index<100)){
## Starting the stopwatch to calculate the per iteration time
ptm<-proc.time()
## Updating the N*K gamma matrix i.e. variational variational parameters
gamma[,,,iter_index]<-gamma.update.wrapper(gamma.curr=gamma[,,,iter_index-1],pi.curr=pi[,,iter_index-1], theta.curr=theta[,,iter_index-1],network=network,N=N,K=K,T_grid = T_grid,bandwidth=bandwidth,data_ids=data_ids,grid_ids=grid_ids)
## Updating the pi vector
pi[,,iter_index]<-pi.update(gamma.curr=gamma[,,,iter_index], N=N, K=K,T_grid = T_grid,data_ids = data_ids,grid_ids = grid_ids)
## Updating the theta matrix
theta[,,iter_index]<-theta.update(theta.curr=theta[,,iter_index-1], pi=pi[,,iter_index],gamma=gamma[,,,iter_index], network=network, N=N, K=K, T_data=T_data,T_grid = T_grid, bandwidth=bandwidth, data_ids=data_ids,grid_ids = grid_ids)
print(theta[,,iter_index])
ELBO_grid.prev<-ELBO_grid.curr
ELBO_grid.curr<-rep(NA_real_,T_grid)
for(t in 1:T_grid){
ELBO_grid.curr[t]<-ELBO_conv_EM_undir_Stab(gamma=gamma[,,,iter_index], pi=pi[,,iter_index], theta_u = theta[t,,iter_index], network=network, N=N, K=K, T_data=T_data, bandwidth=bandwidth, data_ids=data_ids, grid_ids=grid_ids, grid_id_index=(t-1))
}
error<-sqrt(sum((ELBO_grid.prev-ELBO_grid.curr)^2))/sqrt(sum(ELBO_grid.prev^2))
print(iter_index)
print(proc.time()-ptm)
print(min(ELBO_grid.curr))
iter_index<-iter_index+1
}
print(theta[,,iter_index-1])
return(list(gamma,pi,theta))
}
#################################################
## Defining Model Selection functions based on converged paramters for K>=2.
## Defining a function to calculate the estimate of H_K
H_K<-function(gamma,theta,N,K,T_grid){
H_K_mat<-matrix(NA_real_,K,K)
## Filling the upper triangular matrix of H_K since it is symmetric
for (k in 1:K){
for (l in k:K){
if (k==l){
t1<-0
for (t  in 1:T_grid){
for(i in 1:(N-1)){
for(j in (i+1):N){
indicator_1<-gamma[i,k]>(1/K)
indicator_2<-gamma[j,k]>(1/K)
if(indicator_1|indicator_2){
indicator<-indicator_1+indicator_2
exp_val<-exp(2*theta[t,k])
t1<-t1+((exp_val/((1+exp_val)^2))*(indicator^2))
}
}
}
}
H_K_mat[k,k]<-t1
}else if (k!=l){
t1<-0
for (t  in 1:T_grid){
for(i in 1:(N-1)){
for(j in (i+1):N){
if(((gamma[i,k]>(1/K))&(gamma[j,l]>(1/K)))|((gamma[i,l]>(1/K))&(gamma[j,k]>(1/K)))){
exp_val<-exp(theta[t,k]+theta[t,l])
t1<-t1+(exp_val/((1+exp_val)^2))
}
}
}
}
H_K_mat[k,l]<-t1
H_K_mat[l,k]<-t1
}
}
}
return(H_K_mat)
}
## Defining a function to calculate the estimate of V_K
V_K<-function(gamma,theta,network,N,K,T_grid,grid_ids){
V_K_mat<-matrix(0,K,K)
for (t in 1:T_grid){
u_vec<-rep(0,K)
for (k in 1:K){
for(i in 1:(N-1)){
for(j in (i+1):N){
indicator_i<-(gamma[i,k]>(1/K))
indicator_j<-(gamma[j,k]>(1/K))
if(indicator_i|indicator_j){
Stab_stat<-(network[i,j,grid_ids[t]]*network[i,j,grid_ids[t]-1])+((1-network[i,j,grid_ids[t]])*(1-network[i,j,grid_ids[t]-1]))
if(indicator_i&indicator_j){
exp_val<-exp(2*theta[t,k])
u_vec[k]<-u_vec[k]+((Stab_stat-(exp_val/(1+exp_val)))*(indicator_i+indicator_j))
}else if(indicator_i&(!indicator_j)){
clusterid_j<-which.max(gamma[j,])
exp_val<-exp(theta[t,k]+theta[t,clusterid_j])
u_vec[k]<-u_vec[k]+(Stab_stat-(exp_val/(1+exp_val)))
}else if(indicator_j&(!indicator_i)){
clusterid_i<-which.max(gamma[i,])
exp_val<-exp(theta[t,k]+theta[t,clusterid_i])
u_vec[k]<-u_vec[k]+(Stab_stat-(exp_val/(1+exp_val)))
}
}
}
}
}
V_K_mat<-V_K_mat+u_vec%*%t(u_vec)
}
return(V_K_mat)
}
## Defining a function to calculate the estimate of conditional log likelihood
cond_loglik<-function(gamma,theta,network,N,K,T_grid,grid_ids){
cl_val<-0
for(t in 1:T_grid){
for(i in 1:(N-1)){
for(j in (i+1):N){
cluster_id_i<-which.max(gamma[i,])
cluster_id_j<-which.max(gamma[j,])
exp_val<-exp(theta[t,cluster_id_i]+theta[t,cluster_id_j])
Stab_stat<-(network[i,j,grid_ids[t]]*network[i,j,grid_ids[t]-1])+((1-network[i,j,grid_ids[t]])*(1-network[i,j,grid_ids[t]-1]))
cl_val<-cl_val+((Stab_stat*(theta[t,cluster_id_i]+theta[t,cluster_id_j]))-(log(1+exp_val)))
}
}
}
return(cl_val)
}
## Defining a function to calculate the estimate of BIC for a given K
BIC<-function(gamma,theta,network,N,K,T_data,T_grid,bandwidth,grid_ids){
H_K_mat<-H_K(gamma = gamma,theta = theta,N = N,K = K,T_grid = T_grid)
V_K_mat<-V_K(gamma = gamma,theta = theta,network = network, N = N,K = K,T_grid = T_grid,grid_ids=grid_ids)
d_K<-sum(diag(solve(H_K_mat+(10^(-10)*diag(K)))%*%(V_K_mat)))
#d_K<-sum(diag(solve(H_K_mat)%*%(V_K_mat)))
t1<-(-2*(cond_loglik(gamma = gamma,theta = theta,network = network,N = N,K = K,T_grid = T_grid,grid_ids=grid_ids)))
t2<-d_K*log(T_data*((N*(N-1))/2))*2.1153*(1/bandwidth)*T_data*0.45
BIC_val<-t1+t2
return(c(t1,t2,BIC_val))
}
########################################################################################################
########################################################################################################
## Defining the functions for K=1
#################################################
## Defining the update function of full matrix theta with dimensions T_grid*K
theta.update_K1<-function(theta.curr,network,N,K,T_data,T_grid,bandwidth,data_ids,grid_ids){
theta.next<-rep(NA_real_,T_grid)
for (t in 1:T_grid){
grad_vec<-grad_EM_undir_K1_Stab(theta_u=theta.curr[t], network=network, N=N, K=K, T_grid=T_grid)
grad_vec_kern<-rep(NA_real_,T_grid)
for (temp_index in 1:T_grid){
grad_vec_kern[temp_index]<-grad_vec[temp_index]*(1/bandwidth)*epan((data_ids[temp_index+1]-grid_ids[t])/bandwidth)
}
gradient<-sum(grad_vec_kern)
hess<-hess_EM_undir_K1_Stab(theta_u=theta.curr[t], N=N, K=K, T_data=T_data, bandwidth=bandwidth, data_ids=data_ids, grid_ids=grid_ids, grid_id_index=(t-1))
theta.next[t]<-theta.curr[t]-((1/hess)*gradient)
}
return(theta.next)
}
#################################################
## Defining a function that takes inputs as: 1) initial values list of parameters, 2) network, 3) Number of clusters K and 4) number of iterations and outputs the whole list of all parameter iterates
iterator_K1<-function(start,network,K,n_iter,thres,bandwidth,grid_ids){
N<-dim(network)[1]
T_data<-dim(network)[3] ## Total time points in the network for which we have data in the form of
## adjacency matrix
T_grid<-length(grid_ids)  ## Number of grid points
## Defining the actual data points
data_ids<-1:T_data
## initializing the arrays for parameters
theta<-matrix(NA_real_,T_grid,n_iter)
theta[,1]<-start
## iterations
## Defining the iteration index
iter_index<-2
## Initializing the error
error<-Inf
## Initializing the current ELBO values over the whole grid
ELBO_grid.curr<-rep(10^10,T_grid)
while(error>thres){
## Starting the stopwatch to calculate the per iteration time
ptm<-proc.time()
## Updating the theta matrix
theta[,iter_index]<-theta.update_K1(theta.curr=theta[,iter_index-1], network=network, N=N, K=K,T_data=T_data, T_grid = T_grid, bandwidth=bandwidth, data_ids=data_ids,grid_ids = grid_ids)
ELBO_grid.prev<-ELBO_grid.curr
ELBO_grid.curr<-rep(NA_real_,T_grid)
for(t in 1:T_grid){
ELBO_grid.curr[t]<-ELBO_conv_EM_undir_K1_Stab(theta_u = theta[t,iter_index], network=network, N=N, K=K, T_data=T_data, bandwidth=bandwidth, data_ids=data_ids, grid_ids=grid_ids, grid_id_index=(t-1))
}
error<-sqrt(sum((ELBO_grid.prev-ELBO_grid.curr)^2))/sqrt(sum(ELBO_grid.prev^2))
print(iter_index)
print(proc.time()-ptm)
iter_index<-iter_index+1
}
return(theta)
}
#########################################################################################################
## Defining Model Selection functions for K=1 based on converged paramters.
## Defining a function to calculate the estimate of H_K
H_K1<-function(theta,N,T_grid){
H_K_val<-0
for (t in 1:T_grid){
for(i in 1:(N-1)){
for(j in (i+1):N){
exp_val<-exp(2*theta[t])
H_K_val<-H_K_val+(4*(exp_val/((1+exp_val)^2)))
}
}
}
return(H_K_val)
}
## Defining a function to calculate the estimate of V_K
V_K1<-function(theta,network,N,T_grid,grid_ids){
V_K_val<-0
for (t in 1:T_grid){
u_val<-0
for(i in 1:(N-1)){
for(j in (i+1):N){
exp_val<-exp(2*theta[t])
Stab_stat<-(network[i,j,grid_ids[t]]*network[i,j,grid_ids[t]-1])+((1-network[i,j,grid_ids[t]])*(1-network[i,j,grid_ids[t]-1]))
u_val<-u_val+(2*(Stab_stat-(exp_val/(1+exp_val))))
}
}
V_K_val<-V_K_val+(u_val^2)
}
return(V_K_val)
}
## Defining a function to calculate the estimate of conditional log likelihood
cond_loglik_K1<-function(theta,network,N,T_grid,grid_ids){
cl_val<-0
for(t in 1:T_grid){
for(i in 1:(N-1)){
for(j in (i+1):N){
exp_val<-exp(2*theta[t])
Stab_stat<-(network[i,j,grid_ids[t]]*network[i,j,grid_ids[t]-1])+((1-network[i,j,grid_ids[t]])*(1-network[i,j,grid_ids[t]-1]))
cl_val<-cl_val+((Stab_stat*(2*theta[t]))-(log(1+exp_val)))
}
}
}
return(cl_val)
}
## Defining a function to calculate the estimate of BIC for a given K
BIC_K1<-function(theta,network,N,K,T_data,T_grid,bandwidth,grid_ids){
H_K_val<-H_K1(theta = theta,N = N,T_grid = T_grid)
V_K_val<-V_K1(theta = theta,network = network, N = N,T_grid = T_grid,grid_ids=grid_ids)
d_K<-V_K_val/H_K_val
t1<-(-2*(cond_loglik_K1(theta = theta,network = network,N = N,T_grid = T_grid,grid_ids=grid_ids)))
t2<-d_K*log(T_data*((N*(N-1))/2))*2.1153*(1/bandwidth)*T_data*0.45
BIC_val<-t1+t2
return(c(t1,t2,BIC_val))
}
########################################################################################################
## Defining the Rand Index and RASE functions for evaluating the performance of clustering and estimation    respectively
## Rand Index function
RI<-function(cluster_ids_est, cluster_ids_true){
n=length(cluster_ids_est)
RI_val=0
for(i in 1:(n-1)){
for(j in (i+1):n){
RI_val=RI_val+as.numeric((cluster_ids_est[i]==cluster_ids_est[j])==(cluster_ids_true[i]==cluster_ids_true[j]))
}
}
RI_mean=RI_val/(n*(n-1)/2)
return(RI_mean)
}
ARI<-function(cluster_ids_est, cluster_ids_true){
RI_time<-rep(NA_real_,ncol(cluster_ids_est))
for (k in 1:ncol(cluster_ids_est)){
n=length(cluster_ids_est[,k])
RI_val=0
for(i in 1:(n-1)){
for(j in (i+1):n){
RI_val=RI_val+as.numeric((cluster_ids_est[i,k]==cluster_ids_est[j,k])==(cluster_ids_true[i,k]==cluster_ids_true[j,k]))
}
}
RI_mean=RI_val/(n*(n-1)/2)
RI_time[k]<-RI_mean
}
RI_time_mean<-mean(RI_time)
return(RI_time_mean)
}
#################################################
## RASE function
RASE_theta<-function(theta_est, theta_true){
if(is.vector(theta_est)!=1){
RASE_val<-sqrt(sum((theta_est-theta_true)^2)/prod(dim(theta_est)))
}else{RASE_val<-sqrt(sum((theta_est-theta_true)^2)/length(theta_est))}
return(RASE_val)
}
#########################################################################################################
## Defining the parameters
N<-dim(sim.net)[1] ## Number of nodes from the network
## Total time points in the network for which we have data in the form of adjacency matrix
T_data<-dim(sim.net)[3]
## Defining the actual data points and grid points
data_ids<-(1:T_data)
#grid_ids<-1:T_data
grid_ids<-seq(2,T_data,by = 1)
## Defining the total number of grid points
T_grid<-length(grid_ids)
# Defining the epanechnikov kernel bandwidth: h
h<-bandwidth
K<-nclust ## Defining the number of clusters
#################################################
if(K==1){
gamma.start <- rep(1,N)
}else{
## Setting initial values using package lda which includes mixed membership stochastic block model (MMSB). Using first time point network to run MMSB. Using the mixed membership result of MMSB as our intial gamma. Next we use inital gamma to find initial pi (mixing proportion). Lastly, for network parameter theta we start with 0 matrix.
set.seed((2))
MMSB_result <- mmsb.collapsed.gibbs.sampler(beta.prior = list(1,1),K = K,network = sim.net[,,1],alpha = 1/2,num.iterations = 10000)
gamma.start <- with(MMSB_result, t(document_sums)/colSums(document_sums))
## There is some chance that some component of initial gamma will be exactly 0 which can cause problem in calculating log(gamma). Therfore adding very small amount (10^(-3)) to exact 0 value and rescaling to have sum to 1.
for(i in 1:N){
gamma.start[i, which(gamma.start[i,] == 0)] <- rep(10^(-3), length(which(gamma.start[i,] == 0)))
gamma.start[i,] <- gamma.start[i,]/sum(gamma.start[i,])
}
}
#################################################
## Defining the starting values of the iterator and running the main algorithm
start<-list()
if(K==1){
start<-rep(0,T_grid)
#debug(iterator_K1)
param<-iterator_K1(start=start, network=sim.net, K=K, n_iter=1000, thres=0.0001,bandwidth = h, grid_ids = grid_ids)
}else{
start[[1]]<-array(rep(gamma.start,T_grid),dim=c(N,K,T_grid))
start[[2]]<-matrix(rep(1/K,T_grid*K),T_grid,K)#pi.update(gamma.curr = gamma.start,N=N,K=K)
start[[3]]<-jitter(matrix(0,T_grid,K))
#debug(iterator)
#ptm<-proc.time()
param<-iterator(start=start, network=sim.net, K=K, n_iter=1000, thres=0.000001,bandwidth = h, grid_ids = grid_ids)
#print(proc.time()-ptm)
}
#################################################
## extracting the coverged parameter values and calculating BIC
n_iter=1
indicator_last<-0
while(indicator_last==0){
if(K==1){
temp<-is.na(param[1,n_iter])
}else{temp<-is.na(param[[1]][1,1,1,n_iter])}
if(temp==TRUE){
n_last<-n_iter-1
indicator_last<-1
}
n_iter<-n_iter+1
}
param_converge<-list()
if(K==1){
param_converge<-param[,n_last]
BIC_val<-BIC_K1(theta = param_converge,network = sim.net,N = N,T_data = T_data,T_grid = T_grid,bandwidth = h,grid_ids=grid_ids)
if(sim_indicator==1){
RI_val<-RI(cluster_ids_est = rep(1,N),cluster_ids_true = cluster_ids_true)
if(K==K_true){
RASE_theta<-RASE_theta(theta_est = param_converge,theta_true = theta_true)
output_list<-list(param_converge,BIC_val,RI_val,RASE_theta)
}else{
output_list<-list(param_converge,BIC_val,RI_val)
}
}else{output_list<-list(param_converge,BIC_val)}
}else{
param_converge[[1]]<-param[[1]][,,,n_last]
param_converge[[2]]<-param[[2]][,,n_last]
param_converge[[3]]<-param[[3]][,,n_last]
cluster_ids_est<-matrix(NA_real_,N,T_grid)
for (t in 1:T_grid){
cluster_ids_est[,t]<-as.vector(apply(X = matrix(1:N),MARGIN = 1,FUN = function(x){
cluster_id<-which.max(param_converge[[1]][,,t][x,])
return(cluster_id)
}))
}
BIC_val<-0
#BIC_val<-BIC(gamma = param_converge[[1]], theta = param_converge[[3]],network = sim.net,N = N,K = K,T_data = T_data,T_grid = T_grid,bandwidth = h,grid_ids=grid_ids)
if(sim_indicator==1){
RI_val<-ARI(cluster_ids_est = cluster_ids_est,cluster_ids_true = cluster_ids_true)
if(K==K_true){
K_permute_mat<-do.call(rbind,permn(1:K))
RASE_theta_vec<-rep(NA_real_,nrow(K_permute_mat))
for (k in 1:nrow(K_permute_mat)){
theta_est<-param_converge[[3]][,K_permute_mat[k,]]
RASE_theta_vec[k]<-RASE_theta(theta_est = theta_est,theta_true = theta_true)
}
permute_true_id<-which.min(RASE_theta_vec)
RASE_theta<-RASE_theta_vec[permute_true_id]
output_list<-list(param_converge,cluster_ids_est,BIC_val,RI_val,RASE_theta)
}else{
output_list<-list(param_converge,cluster_ids_est,BIC_val,RI_val)
}
}else{output_list<-list(param_converge,cluster_ids_est,BIC_val)}
}
return(output_list)
}
simulate_network_undir_Stab<-function(N,T_data,alpha,pi,theta_dens,theta_stab){
network<-array(NA_integer_,dim = c(N,N,T_data))
clust_id_init_sampling<-rmultinom(n = N, size = 1, prob = alpha)
clust_ids_init<-apply(X = clust_id_init_sampling,MARGIN = 2,FUN = function(x){
y<-which(x==1)
return(y)
})
clust_ids<-matrix(NA_integer_,N,T_data)
clust_ids[,1]<-clust_ids_init
clust_ids[,2]<-clust_ids[,1]
for (t in 3:T_data){
for (i in 1:N){
clust_ids[i,t]<-which(rmultinom(n = 1,size = 1,prob = pi[clust_ids[i,t-1],,t-2])==1)
}
}
for (t in 1:T_data){
for (i in 1:(N-1)){
for (j in (i+1):N){
## Defining the probabilities for D_i,j = (0,0), (1,0), (0,1), (1,1) given the cluster ids for node i and node j. Note D_ij=(1,0) implies Y(i,j)=1 and Y(j,i)=0 and vice versa.
if(t>1){
exp_val<-exp(theta_stab[t-1,clust_ids[i,t]]+theta_stab[t-1,clust_ids[j,t]])
probab<-exp_val/(1+exp_val)
edge_sample<-rbinom(n = 1, size = 1, prob = probab)
if((edge_sample==0)){
network[i,j,t]<-as.numeric(!network[i,j,t-1])
network[j,i,t]<-network[i,j,t]
}else if(edge_sample==1){
network[i,j,t]<-network[i,j,t-1]
network[j,i,t]<-network[i,j,t]
}
}else if (t==1){
exp_val<-exp(theta_dens[clust_ids[i,t]]+theta_dens[clust_ids[j,t]])
probab<-exp_val/(1+exp_val)
edge_sample<-rbinom(n = 1, size = 1, prob = probab)
if(edge_sample==0){
network[i,j,t]<-0
network[j,i,t]<-0
}else if(edge_sample==1){
network[i,j,t]<-1
network[j,i,t]<-1
}
}
}
}
diag(network[,,t])<-0
}
return(list(network,clust_ids[,2:T_data]))
}
T_data<-21
pi_true<-array(NA_real_,dim=c(2,2,T_data-1))
theta_true<-matrix(NA_real_,T_data-1,2)
z <- seq(0,1,by=0.02)
for (t in 1:(T_data-1)){
pi_true[,,t]<-matrix(c(0.9,0.1,0.1,0.9),2,2)
theta_true[t,1]<--1
theta_true[t,2]<-1
#theta_true[t,1]<-(1/8)*cos(5*pi*z[t])
#theta_true[t,2]<-(-1/8)*cos(5*pi*z[t])+1.25
}
plot(theta_true[,1],type="l")
plot(theta_true[,2],type="l")
net_list<-simulate_network_undir_Stab(N = 200,T_data=T_data,alpha=c(0.5,0.5),pi=pi_true,theta_dens = c(-1,1),theta_stab = theta_true)
net_result<-wrapper_EM_undir_Stab_Cov(sim.net = net_list[[1]],nclust = 2,bandwidth = 2.5,sim_indicator = 1,theta_true = theta_true,K_true = 2,cluster_ids_true = net_list[[2]])
a<-array(1:8,dim=c(2,2,2))
a
b<-t(apply(X = a,MARGIN = 1,FUN = function(x){
x_norm<-x/sum(x)
return(x_norm)
}))
b
b<-t(apply(X = a[,,1],MARGIN = 1,FUN = function(x){
x_norm<-x/sum(x)
return(x_norm)
}))
b
c<-matrix(1:4,2,2)
c
d<-t(apply(X = c,MARGIN = 1,FUN = function(x){
x_norm<-x/sum(x)
return(x_norm)
}))
d
setwd(dir = "Box Sync/PSU/Summer 2017/Research/Network Models/Project 1 (Semiparametric)/code/boost C++ code latest version/")
library(Rcpp)
library(RcppArmadillo)
compileAttributes("EMundirStabCov/")
