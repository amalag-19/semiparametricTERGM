// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;
using namespace arma;
using namespace std;

// rowsum_Mat
vec rowsum_Mat(mat M);
RcppExport SEXP EMundirStabCov_rowsum_Mat(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(rowsum_Mat(M));
    return rcpp_result_gen;
END_RCPP
}
// colsum_Mat
vec colsum_Mat(mat M);
RcppExport SEXP EMundirStabCov_colsum_Mat(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(colsum_Mat(M));
    return rcpp_result_gen;
END_RCPP
}
// epan
float epan(float input);
RcppExport SEXP EMundirStabCov_epan(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(epan(input));
    return rcpp_result_gen;
END_RCPP
}
// gamma_update_undir_Stab
cube gamma_update_undir_Stab(cube gamma, mat pi, mat theta, cube network, int N, int K, int T_grid, vec grid_ids, vec kernel_vec, vec nonzero_ids, int nonzero_ids_len);
RcppExport SEXP EMundirStabCov_gamma_update_undir_Stab(SEXP gammaSEXP, SEXP piSEXP, SEXP thetaSEXP, SEXP networkSEXP, SEXP NSEXP, SEXP KSEXP, SEXP T_gridSEXP, SEXP grid_idsSEXP, SEXP kernel_vecSEXP, SEXP nonzero_idsSEXP, SEXP nonzero_ids_lenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< cube >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< mat >::type pi(piSEXP);
    Rcpp::traits::input_parameter< mat >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< cube >::type network(networkSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type T_grid(T_gridSEXP);
    Rcpp::traits::input_parameter< vec >::type grid_ids(grid_idsSEXP);
    Rcpp::traits::input_parameter< vec >::type kernel_vec(kernel_vecSEXP);
    Rcpp::traits::input_parameter< vec >::type nonzero_ids(nonzero_idsSEXP);
    Rcpp::traits::input_parameter< int >::type nonzero_ids_len(nonzero_ids_lenSEXP);
    rcpp_result_gen = Rcpp::wrap(gamma_update_undir_Stab(gamma, pi, theta, network, N, K, T_grid, grid_ids, kernel_vec, nonzero_ids, nonzero_ids_len));
    return rcpp_result_gen;
END_RCPP
}
// grad_EM_undir_Stab
mat grad_EM_undir_Stab(vec theta_u, cube gamma, cube network, int N, int K, vec nonzero_ids, int nonzero_ids_len);
RcppExport SEXP EMundirStabCov_grad_EM_undir_Stab(SEXP theta_uSEXP, SEXP gammaSEXP, SEXP networkSEXP, SEXP NSEXP, SEXP KSEXP, SEXP nonzero_idsSEXP, SEXP nonzero_ids_lenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type theta_u(theta_uSEXP);
    Rcpp::traits::input_parameter< cube >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< cube >::type network(networkSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< vec >::type nonzero_ids(nonzero_idsSEXP);
    Rcpp::traits::input_parameter< int >::type nonzero_ids_len(nonzero_ids_lenSEXP);
    rcpp_result_gen = Rcpp::wrap(grad_EM_undir_Stab(theta_u, gamma, network, N, K, nonzero_ids, nonzero_ids_len));
    return rcpp_result_gen;
END_RCPP
}
// hess_EM_undir_Stab
mat hess_EM_undir_Stab(vec theta_u, cube gamma, int N, int K, int T_grid, float bandwidth, vec data_ids, vec grid_ids, int grid_id_index);
RcppExport SEXP EMundirStabCov_hess_EM_undir_Stab(SEXP theta_uSEXP, SEXP gammaSEXP, SEXP NSEXP, SEXP KSEXP, SEXP T_gridSEXP, SEXP bandwidthSEXP, SEXP data_idsSEXP, SEXP grid_idsSEXP, SEXP grid_id_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type theta_u(theta_uSEXP);
    Rcpp::traits::input_parameter< cube >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type T_grid(T_gridSEXP);
    Rcpp::traits::input_parameter< float >::type bandwidth(bandwidthSEXP);
    Rcpp::traits::input_parameter< vec >::type data_ids(data_idsSEXP);
    Rcpp::traits::input_parameter< vec >::type grid_ids(grid_idsSEXP);
    Rcpp::traits::input_parameter< int >::type grid_id_index(grid_id_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(hess_EM_undir_Stab(theta_u, gamma, N, K, T_grid, bandwidth, data_ids, grid_ids, grid_id_index));
    return rcpp_result_gen;
END_RCPP
}
// ELBO_conv_EM_undir_Stab
float ELBO_conv_EM_undir_Stab(cube gamma, mat pi, vec theta_u, cube network, int N, int K, int T_data, float bandwidth, vec data_ids, vec grid_ids, int grid_id_index);
RcppExport SEXP EMundirStabCov_ELBO_conv_EM_undir_Stab(SEXP gammaSEXP, SEXP piSEXP, SEXP theta_uSEXP, SEXP networkSEXP, SEXP NSEXP, SEXP KSEXP, SEXP T_dataSEXP, SEXP bandwidthSEXP, SEXP data_idsSEXP, SEXP grid_idsSEXP, SEXP grid_id_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< cube >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< mat >::type pi(piSEXP);
    Rcpp::traits::input_parameter< vec >::type theta_u(theta_uSEXP);
    Rcpp::traits::input_parameter< cube >::type network(networkSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type T_data(T_dataSEXP);
    Rcpp::traits::input_parameter< float >::type bandwidth(bandwidthSEXP);
    Rcpp::traits::input_parameter< vec >::type data_ids(data_idsSEXP);
    Rcpp::traits::input_parameter< vec >::type grid_ids(grid_idsSEXP);
    Rcpp::traits::input_parameter< int >::type grid_id_index(grid_id_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(ELBO_conv_EM_undir_Stab(gamma, pi, theta_u, network, N, K, T_data, bandwidth, data_ids, grid_ids, grid_id_index));
    return rcpp_result_gen;
END_RCPP
}
// gamma_update_undir_CV
cube gamma_update_undir_CV(mat gamma, vec pi, mat theta, cube network, int N, int K, int T_grid, vec grid_ids, int test_node_set_len);
RcppExport SEXP EMundirStabCov_gamma_update_undir_CV(SEXP gammaSEXP, SEXP piSEXP, SEXP thetaSEXP, SEXP networkSEXP, SEXP NSEXP, SEXP KSEXP, SEXP T_gridSEXP, SEXP grid_idsSEXP, SEXP test_node_set_lenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< vec >::type pi(piSEXP);
    Rcpp::traits::input_parameter< mat >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< cube >::type network(networkSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type T_grid(T_gridSEXP);
    Rcpp::traits::input_parameter< vec >::type grid_ids(grid_idsSEXP);
    Rcpp::traits::input_parameter< int >::type test_node_set_len(test_node_set_lenSEXP);
    rcpp_result_gen = Rcpp::wrap(gamma_update_undir_CV(gamma, pi, theta, network, N, K, T_grid, grid_ids, test_node_set_len));
    return rcpp_result_gen;
END_RCPP
}
// grad_EM_undir_CV
mat grad_EM_undir_CV(vec theta_u, mat gamma, cube network, int N, int K, vec nonzero_ids, int nonzero_ids_len, int test_node_set_len);
RcppExport SEXP EMundirStabCov_grad_EM_undir_CV(SEXP theta_uSEXP, SEXP gammaSEXP, SEXP networkSEXP, SEXP NSEXP, SEXP KSEXP, SEXP nonzero_idsSEXP, SEXP nonzero_ids_lenSEXP, SEXP test_node_set_lenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type theta_u(theta_uSEXP);
    Rcpp::traits::input_parameter< mat >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< cube >::type network(networkSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< vec >::type nonzero_ids(nonzero_idsSEXP);
    Rcpp::traits::input_parameter< int >::type nonzero_ids_len(nonzero_ids_lenSEXP);
    Rcpp::traits::input_parameter< int >::type test_node_set_len(test_node_set_lenSEXP);
    rcpp_result_gen = Rcpp::wrap(grad_EM_undir_CV(theta_u, gamma, network, N, K, nonzero_ids, nonzero_ids_len, test_node_set_len));
    return rcpp_result_gen;
END_RCPP
}
// hess_EM_undir_CV
mat hess_EM_undir_CV(vec theta_u, mat gamma, int N, int K, int T_data, float bandwidth, vec data_ids, vec grid_ids, int grid_id_index, int test_node_set_len);
RcppExport SEXP EMundirStabCov_hess_EM_undir_CV(SEXP theta_uSEXP, SEXP gammaSEXP, SEXP NSEXP, SEXP KSEXP, SEXP T_dataSEXP, SEXP bandwidthSEXP, SEXP data_idsSEXP, SEXP grid_idsSEXP, SEXP grid_id_indexSEXP, SEXP test_node_set_lenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type theta_u(theta_uSEXP);
    Rcpp::traits::input_parameter< mat >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type T_data(T_dataSEXP);
    Rcpp::traits::input_parameter< float >::type bandwidth(bandwidthSEXP);
    Rcpp::traits::input_parameter< vec >::type data_ids(data_idsSEXP);
    Rcpp::traits::input_parameter< vec >::type grid_ids(grid_idsSEXP);
    Rcpp::traits::input_parameter< int >::type grid_id_index(grid_id_indexSEXP);
    Rcpp::traits::input_parameter< int >::type test_node_set_len(test_node_set_lenSEXP);
    rcpp_result_gen = Rcpp::wrap(hess_EM_undir_CV(theta_u, gamma, N, K, T_data, bandwidth, data_ids, grid_ids, grid_id_index, test_node_set_len));
    return rcpp_result_gen;
END_RCPP
}
// ELBO_conv_EM_undir_CV
float ELBO_conv_EM_undir_CV(mat gamma, vec pi, vec theta_u, cube network, int N, int K, int T_data, float bandwidth, vec data_ids, vec grid_ids, int grid_id_index, int test_node_set_len);
RcppExport SEXP EMundirStabCov_ELBO_conv_EM_undir_CV(SEXP gammaSEXP, SEXP piSEXP, SEXP theta_uSEXP, SEXP networkSEXP, SEXP NSEXP, SEXP KSEXP, SEXP T_dataSEXP, SEXP bandwidthSEXP, SEXP data_idsSEXP, SEXP grid_idsSEXP, SEXP grid_id_indexSEXP, SEXP test_node_set_lenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< vec >::type pi(piSEXP);
    Rcpp::traits::input_parameter< vec >::type theta_u(theta_uSEXP);
    Rcpp::traits::input_parameter< cube >::type network(networkSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type T_data(T_dataSEXP);
    Rcpp::traits::input_parameter< float >::type bandwidth(bandwidthSEXP);
    Rcpp::traits::input_parameter< vec >::type data_ids(data_idsSEXP);
    Rcpp::traits::input_parameter< vec >::type grid_ids(grid_idsSEXP);
    Rcpp::traits::input_parameter< int >::type grid_id_index(grid_id_indexSEXP);
    Rcpp::traits::input_parameter< int >::type test_node_set_len(test_node_set_lenSEXP);
    rcpp_result_gen = Rcpp::wrap(ELBO_conv_EM_undir_CV(gamma, pi, theta_u, network, N, K, T_data, bandwidth, data_ids, grid_ids, grid_id_index, test_node_set_len));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"EMundirStabCov_rowsum_Mat", (DL_FUNC) &EMundirStabCov_rowsum_Mat, 1},
    {"EMundirStabCov_colsum_Mat", (DL_FUNC) &EMundirStabCov_colsum_Mat, 1},
    {"EMundirStabCov_epan", (DL_FUNC) &EMundirStabCov_epan, 1},
    {"EMundirStabCov_gamma_update_undir_Stab", (DL_FUNC) &EMundirStabCov_gamma_update_undir_Stab, 11},
    {"EMundirStabCov_grad_EM_undir_Stab", (DL_FUNC) &EMundirStabCov_grad_EM_undir_Stab, 7},
    {"EMundirStabCov_hess_EM_undir_Stab", (DL_FUNC) &EMundirStabCov_hess_EM_undir_Stab, 9},
    {"EMundirStabCov_ELBO_conv_EM_undir_Stab", (DL_FUNC) &EMundirStabCov_ELBO_conv_EM_undir_Stab, 11},
    {"EMundirStabCov_gamma_update_undir_CV", (DL_FUNC) &EMundirStabCov_gamma_update_undir_CV, 9},
    {"EMundirStabCov_grad_EM_undir_CV", (DL_FUNC) &EMundirStabCov_grad_EM_undir_CV, 8},
    {"EMundirStabCov_hess_EM_undir_CV", (DL_FUNC) &EMundirStabCov_hess_EM_undir_CV, 10},
    {"EMundirStabCov_ELBO_conv_EM_undir_CV", (DL_FUNC) &EMundirStabCov_ELBO_conv_EM_undir_CV, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_EMundirStabCov(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
